{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"hw12_reinforcement_learning_chinese_version.ipynb","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"05b1ee56970c410896877760b52c9214":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_8a3106d9a60142469f51c882ab6a089e","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_c1166743355440d2a355132a2fea512c","IPY_MODEL_af1ee460ae414c2c8bc9132437e5c80e"]}},"8a3106d9a60142469f51c882ab6a089e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"c1166743355440d2a355132a2fea512c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","state":{"_view_name":"ProgressView","style":"IPY_MODEL_497d775c41744cfaa78f9485ffe563f6","_dom_classes":[],"description":"Total:  275.3, Final:  100.0: 100%","_model_name":"FloatProgressModel","bar_style":"success","max":2000,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":2000,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_7c1338fd15274941a7d70c44c7c89d5f"}},"af1ee460ae414c2c8bc9132437e5c80e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","state":{"_view_name":"HTMLView","style":"IPY_MODEL_ef822bf70c7e4f5992cb7e52985ca584","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 2000/2000 [4:38:34&lt;00:00,  8.36s/it]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_686c6cc13ece4aa3bd878184661dcb34"}},"497d775c41744cfaa78f9485ffe563f6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"7c1338fd15274941a7d70c44c7c89d5f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"ef822bf70c7e4f5992cb7e52985ca584":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"686c6cc13ece4aa3bd878184661dcb34":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0_1LX6N49Tim","executionInfo":{"status":"ok","timestamp":1622943805057,"user_tz":-480,"elapsed":3413,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"52151c31-2bc9-46f1-f4bb-c95f9cfe638e"},"source":["import torch\n","try:\n","    # Get GPU name, check if it's K80\n","    GPU_name = torch.cuda.get_device_name()\n","    if GPU_name[-3:] == \"K80\":\n","        print(\"Get K80! :'( RESTART!\")\n","        exit()  # Restart the session\n","    else:\n","        print(\"Your GPU is {}!\".format(GPU_name))\n","        print(\"Great! Keep going~\")\n","except RuntimeError as e:\n","    if e.args == (\"No CUDA GPUs are available\",):\n","        print(\"You are training with CPU! \"\n","              \"Please restart!\")\n","        exit()  # Restart the session\n","    else:\n","        print(\"What's wrong here?\")\n","        print(\"Error message: \\n\", e)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Your GPU is Tesla T4!\n","Great! Keep going~\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Enz9FVHn9hcx","executionInfo":{"status":"ok","timestamp":1622943821997,"user_tz":-480,"elapsed":15899,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"daf5b386-9b5d-459d-c29f-39296001b2ff"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')\n","import os\n","\n","# your workspace in your drive\n","workspace = 'Course_ML2021Spring/HW12'\n","\n","\n","try:\n","  os.chdir(os.path.join('/content/gdrive/My Drive/', workspace))\n","except:\n","  os.mkdir(os.path.join('/content/gdrive/My Drive/', workspace))\n","  os.chdir(os.path.join('/content/gdrive/My Drive/', workspace))"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Fp30SB4bxeQb"},"source":["# **Homework 12 - Reinforcement Learning**\n","\n","若有任何問題，歡迎來信至助教信箱 ntu-ml-2021spring-ta@googlegroups.com\n","\n"]},{"cell_type":"markdown","metadata":{"id":"yXsnCWPtWSNk"},"source":["## 前置作業\n","\n","首先我們需要安裝必要的系統套件及 PyPi 套件。\n","gym 這個套件由 OpenAI 所提供，是一套用來開發與比較 Reinforcement Learning 演算法的工具包（toolkit）。\n","而其餘套件則是為了在 Notebook 中繪圖所需要的套件。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5e2bScpnkVbv","executionInfo":{"status":"ok","timestamp":1622943852705,"user_tz":-480,"elapsed":16639,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"6b8a256a-ba48-45b9-d78e-4eb4963febef"},"source":["!apt update\n","!apt install python-opengl xvfb -y\n","!pip install gym[box2d]==0.18.3 pyvirtualdisplay tqdm numpy==1.19.5 torch==1.8.1"],"execution_count":3,"outputs":[{"output_type":"stream","text":["\u001b[33m\r0% [Working]\u001b[0m\r            \rGet:1 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.152)] [1 InRelease 14.2 kB/88.7\u001b[0m\r                                                                               \rGet:2 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease [3,626 B]\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.152)] [1 InRelease 43.1 kB/88.7\u001b[0m\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.152)] [1 InRelease 75.0 kB/88.7\u001b[0m\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Connecting to archive.ubuntu.com (91.189.88.152)\u001b[0m\u001b[33m\r0% [2 InRelease gpgv 3,626 B] [Connecting to archive.ubuntu.com (91.189.88.152)\u001b[0m\r                                                                               \rIgn:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n","Hit:4 http://archive.ubuntu.com/ubuntu bionic InRelease\n","Get:5 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease [15.9 kB]\n","Ign:6 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","Hit:7 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release\n","Hit:8 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release\n","Get:9 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n","Hit:10 http://ppa.launchpad.net/cran/libgit2/ubuntu bionic InRelease\n","Get:11 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [2,184 kB]\n","Get:12 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\n","Get:13 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic InRelease [15.9 kB]\n","Get:14 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1,414 kB]\n","Get:15 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [450 kB]\n","Hit:16 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease\n","Get:19 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main Sources [1,770 kB]\n","Get:20 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [2,616 kB]\n","Get:21 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [480 kB]\n","Get:22 http://archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 Packages [33.5 kB]\n","Get:23 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main amd64 Packages [906 kB]\n","Get:24 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2,184 kB]\n","Get:25 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic/main amd64 Packages [40.9 kB]\n","Fetched 12.4 MB in 3s (4,376 kB/s)\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","46 packages can be upgraded. Run 'apt list --upgradable' to see them.\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","Suggested packages:\n","  libgle3\n","The following NEW packages will be installed:\n","  python-opengl xvfb\n","0 upgraded, 2 newly installed, 0 to remove and 46 not upgraded.\n","Need to get 1,281 kB of archives.\n","After this operation, 7,686 kB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 python-opengl all 3.1.0+dfsg-1 [496 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 xvfb amd64 2:1.19.6-1ubuntu4.9 [784 kB]\n","Fetched 1,281 kB in 1s (1,704 kB/s)\n","Selecting previously unselected package python-opengl.\n","(Reading database ... 160772 files and directories currently installed.)\n","Preparing to unpack .../python-opengl_3.1.0+dfsg-1_all.deb ...\n","Unpacking python-opengl (3.1.0+dfsg-1) ...\n","Selecting previously unselected package xvfb.\n","Preparing to unpack .../xvfb_2%3a1.19.6-1ubuntu4.9_amd64.deb ...\n","Unpacking xvfb (2:1.19.6-1ubuntu4.9) ...\n","Setting up python-opengl (3.1.0+dfsg-1) ...\n","Setting up xvfb (2:1.19.6-1ubuntu4.9) ...\n","Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n","Collecting gym[box2d]==0.18.3\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/1a/db/816fd52c0c196b6799e89d1f65b6c74fead2707cf7d447f3f354edfa7a44/gym-0.18.3.tar.gz (1.6MB)\n","\u001b[K     |████████████████████████████████| 1.6MB 31.1MB/s \n","\u001b[?25hCollecting pyvirtualdisplay\n","  Downloading https://files.pythonhosted.org/packages/79/30/e99e0c480a858410757e7516958e149285ea08ed6c9cfe201ed0aa12cee2/PyVirtualDisplay-2.2-py3-none-any.whl\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (4.41.1)\n","Requirement already satisfied: numpy==1.19.5 in /usr/local/lib/python3.7/dist-packages (1.19.5)\n","Requirement already satisfied: torch==1.8.1 in /usr/local/lib/python3.7/dist-packages (1.8.1+cu101)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.4.1)\n","Requirement already satisfied: pyglet<=1.5.15,>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.5.0)\n","Requirement already satisfied: Pillow<=8.2.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (7.1.2)\n","Requirement already satisfied: cloudpickle<1.7.0,>=1.2.0 in /usr/local/lib/python3.7/dist-packages (from gym[box2d]==0.18.3) (1.3.0)\n","Collecting box2d-py~=2.3.5\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/87/34/da5393985c3ff9a76351df6127c275dcb5749ae0abbe8d5210f06d97405d/box2d_py-2.3.8-cp37-cp37m-manylinux1_x86_64.whl (448kB)\n","\u001b[K     |████████████████████████████████| 450kB 45.4MB/s \n","\u001b[?25hCollecting EasyProcess\n","  Downloading https://files.pythonhosted.org/packages/48/3c/75573613641c90c6d094059ac28adb748560d99bd27ee6f80cce398f404e/EasyProcess-0.3-py2.py3-none-any.whl\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch==1.8.1) (3.7.4.3)\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyglet<=1.5.15,>=1.4.0->gym[box2d]==0.18.3) (0.16.0)\n","Building wheels for collected packages: gym\n","  Building wheel for gym (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for gym: filename=gym-0.18.3-cp37-none-any.whl size=1657528 sha256=6c116433d70fb0cef106be7077344d3def170b27f39c0246787ad9f37d316318\n","  Stored in directory: /root/.cache/pip/wheels/93/c2/4c/2b4c9b85119994837c08315c9415d71008325b7004d385b418\n","Successfully built gym\n","Installing collected packages: box2d-py, gym, EasyProcess, pyvirtualdisplay\n","  Found existing installation: gym 0.17.3\n","    Uninstalling gym-0.17.3:\n","      Successfully uninstalled gym-0.17.3\n","Successfully installed EasyProcess-0.3 box2d-py-2.3.8 gym-0.18.3 pyvirtualdisplay-2.2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"M_-i3cdoYsks"},"source":["接下來，設置好 virtual display，並引入所有必要的套件。"]},{"cell_type":"code","metadata":{"id":"nl2nREINDLiw","executionInfo":{"status":"ok","timestamp":1622943853979,"user_tz":-480,"elapsed":1277,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}}},"source":["%%capture\n","from pyvirtualdisplay import Display\n","virtual_display = Display(visible=0, size=(1400, 900))\n","virtual_display.start()\n","\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","from IPython import display\n","\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","from torch.distributions import Categorical\n","from tqdm.notebook import tqdm"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HVu9-Vdrl4E3"},"source":["# 請不要更改 random seed !!!!\n","# 不然在judgeboi上 你的成績不會被reproduce !!!!"]},{"cell_type":"code","metadata":{"id":"fV9i8i2YkRbO","executionInfo":{"status":"ok","timestamp":1622943853979,"user_tz":-480,"elapsed":3,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}}},"source":["seed = 543 # Do not change this\n","def fix(env, seed):\n","  env.seed(seed)\n","  env.action_space.seed(seed)\n","  torch.manual_seed(seed)\n","  torch.cuda.manual_seed(seed)\n","  torch.cuda.manual_seed_all(seed)\n","  np.random.seed(seed)\n","  random.seed(seed)\n","  torch.set_deterministic(True)\n","  torch.backends.cudnn.benchmark = False\n","  torch.backends.cudnn.deterministic = True"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"He0XDx6bzjgC"},"source":["最後，引入 OpenAI 的 gym，並建立一個 [Lunar Lander](https://gym.openai.com/envs/LunarLander-v2/) 環境。"]},{"cell_type":"code","metadata":{"id":"N_4-xJcbBt09","executionInfo":{"status":"ok","timestamp":1622943854532,"user_tz":-480,"elapsed":555,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}}},"source":["%%capture\n","import gym\n","import random\n","import numpy as np\n","\n","env = gym.make('LunarLander-v2')\n","\n","fix(env, seed)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"NmiAOfqRwRX5","executionInfo":{"status":"ok","timestamp":1622943854532,"user_tz":-480,"elapsed":3,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}}},"source":["import time\n","start = time.time()"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"LcMjEUWTBEEB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622943855238,"user_tz":-480,"elapsed":708,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"1a12cf3a-69d9-4b0b-e984-395a01920f6b"},"source":["!pip freeze"],"execution_count":8,"outputs":[{"output_type":"stream","text":["absl-py==0.12.0\n","alabaster==0.7.12\n","albumentations==0.1.12\n","altair==4.1.0\n","appdirs==1.4.4\n","argon2-cffi==20.1.0\n","arviz==0.11.2\n","astor==0.8.1\n","astropy==4.2.1\n","astunparse==1.6.3\n","async-generator==1.10\n","atari-py==0.2.9\n","atomicwrites==1.4.0\n","attrs==21.2.0\n","audioread==2.1.9\n","autograd==1.3\n","Babel==2.9.1\n","backcall==0.2.0\n","beautifulsoup4==4.6.3\n","bleach==3.3.0\n","blis==0.4.1\n","bokeh==2.3.2\n","Bottleneck==1.3.2\n","box2d-py==2.3.8\n","branca==0.4.2\n","bs4==0.0.1\n","CacheControl==0.12.6\n","cached-property==1.5.2\n","cachetools==4.2.2\n","catalogue==1.0.0\n","certifi==2020.12.5\n","cffi==1.14.5\n","cftime==1.5.0\n","chainer==7.4.0\n","chardet==3.0.4\n","click==7.1.2\n","cloudpickle==1.3.0\n","cmake==3.12.0\n","cmdstanpy==0.9.5\n","colorcet==2.0.6\n","colorlover==0.3.0\n","community==1.0.0b1\n","contextlib2==0.5.5\n","convertdate==2.3.2\n","coverage==3.7.1\n","coveralls==0.5\n","crcmod==1.7\n","cufflinks==0.17.3\n","cupy-cuda101==7.4.0\n","cvxopt==1.2.6\n","cvxpy==1.0.31\n","cycler==0.10.0\n","cymem==2.0.5\n","Cython==0.29.23\n","daft==0.0.4\n","dask==2.12.0\n","datascience==0.10.6\n","debugpy==1.0.0\n","decorator==4.4.2\n","defusedxml==0.7.1\n","descartes==1.1.0\n","dill==0.3.3\n","distributed==1.25.3\n","dlib==19.18.0\n","dm-tree==0.1.6\n","docopt==0.6.2\n","docutils==0.17.1\n","dopamine-rl==1.0.5\n","earthengine-api==0.1.266\n","easydict==1.9\n","EasyProcess==0.3\n","ecos==2.0.7.post1\n","editdistance==0.5.3\n","en-core-web-sm==2.2.5\n","entrypoints==0.3\n","ephem==3.7.7.1\n","et-xmlfile==1.1.0\n","fa2==0.3.5\n","fastai==1.0.61\n","fastdtw==0.3.4\n","fastprogress==1.0.0\n","fastrlock==0.6\n","fbprophet==0.7.1\n","feather-format==0.4.1\n","filelock==3.0.12\n","firebase-admin==4.4.0\n","fix-yahoo-finance==0.0.22\n","Flask==1.1.4\n","flatbuffers==1.12\n","folium==0.8.3\n","future==0.16.0\n","gast==0.4.0\n","GDAL==2.2.2\n","gdown==3.6.4\n","gensim==3.6.0\n","geographiclib==1.50\n","geopy==1.17.0\n","gin-config==0.4.0\n","glob2==0.7\n","google==2.0.3\n","google-api-core==1.26.3\n","google-api-python-client==1.12.8\n","google-auth==1.30.0\n","google-auth-httplib2==0.0.4\n","google-auth-oauthlib==0.4.4\n","google-cloud-bigquery==1.21.0\n","google-cloud-bigquery-storage==1.1.0\n","google-cloud-core==1.0.3\n","google-cloud-datastore==1.8.0\n","google-cloud-firestore==1.7.0\n","google-cloud-language==1.2.0\n","google-cloud-storage==1.18.1\n","google-cloud-translate==1.5.0\n","google-colab==1.0.0\n","google-pasta==0.2.0\n","google-resumable-media==0.4.1\n","googleapis-common-protos==1.53.0\n","googledrivedownloader==0.4\n","graphviz==0.10.1\n","greenlet==1.1.0\n","grpcio==1.34.1\n","gspread==3.0.1\n","gspread-dataframe==3.0.8\n","gym==0.18.3\n","h5py==3.1.0\n","HeapDict==1.0.1\n","hijri-converter==2.1.1\n","holidays==0.10.5.2\n","holoviews==1.14.3\n","html5lib==1.0.1\n","httpimport==0.5.18\n","httplib2==0.17.4\n","httplib2shim==0.0.3\n","humanize==0.5.1\n","hyperopt==0.1.2\n","ideep4py==2.0.0.post3\n","idna==2.10\n","imageio==2.4.1\n","imagesize==1.2.0\n","imbalanced-learn==0.4.3\n","imblearn==0.0\n","imgaug==0.2.9\n","importlib-metadata==4.0.1\n","importlib-resources==5.1.3\n","imutils==0.5.4\n","inflect==2.1.0\n","iniconfig==1.1.1\n","install==1.3.4\n","intel-openmp==2021.2.0\n","intervaltree==2.1.0\n","ipykernel==4.10.1\n","ipython==5.5.0\n","ipython-genutils==0.2.0\n","ipython-sql==0.3.9\n","ipywidgets==7.6.3\n","itsdangerous==1.1.0\n","jax==0.2.13\n","jaxlib==0.1.66+cuda110\n","jdcal==1.4.1\n","jedi==0.18.0\n","jieba==0.42.1\n","Jinja2==2.11.3\n","joblib==1.0.1\n","jpeg4py==0.1.4\n","jsonschema==2.6.0\n","jupyter==1.0.0\n","jupyter-client==5.3.5\n","jupyter-console==5.2.0\n","jupyter-core==4.7.1\n","jupyterlab-pygments==0.1.2\n","jupyterlab-widgets==1.0.0\n","kaggle==1.5.12\n","kapre==0.3.5\n","Keras==2.4.3\n","keras-nightly==2.5.0.dev2021032900\n","Keras-Preprocessing==1.1.2\n","keras-vis==0.4.1\n","kiwisolver==1.3.1\n","korean-lunar-calendar==0.2.1\n","librosa==0.8.0\n","lightgbm==2.2.3\n","llvmlite==0.34.0\n","lmdb==0.99\n","LunarCalendar==0.0.9\n","lxml==4.2.6\n","Markdown==3.3.4\n","MarkupSafe==2.0.1\n","matplotlib==3.2.2\n","matplotlib-inline==0.1.2\n","matplotlib-venn==0.11.6\n","missingno==0.4.2\n","mistune==0.8.4\n","mizani==0.6.0\n","mkl==2019.0\n","mlxtend==0.14.0\n","more-itertools==8.7.0\n","moviepy==0.2.3.5\n","mpmath==1.2.1\n","msgpack==1.0.2\n","multiprocess==0.70.11.1\n","multitasking==0.0.9\n","murmurhash==1.0.5\n","music21==5.5.0\n","natsort==5.5.0\n","nbclient==0.5.3\n","nbconvert==5.6.1\n","nbformat==5.1.3\n","nest-asyncio==1.5.1\n","netCDF4==1.5.6\n","networkx==2.5.1\n","nibabel==3.0.2\n","nltk==3.2.5\n","notebook==5.3.1\n","numba==0.51.2\n","numexpr==2.7.3\n","numpy==1.19.5\n","nvidia-ml-py3==7.352.0\n","oauth2client==4.1.3\n","oauthlib==3.1.0\n","okgrade==0.4.3\n","opencv-contrib-python==4.1.2.30\n","opencv-python==4.1.2.30\n","openpyxl==2.5.9\n","opt-einsum==3.3.0\n","osqp==0.6.2.post0\n","packaging==20.9\n","palettable==3.3.0\n","pandas==1.1.5\n","pandas-datareader==0.9.0\n","pandas-gbq==0.13.3\n","pandas-profiling==1.4.1\n","pandocfilters==1.4.3\n","panel==0.11.3\n","param==1.10.1\n","parso==0.8.2\n","pathlib==1.0.1\n","patsy==0.5.1\n","pexpect==4.8.0\n","pickleshare==0.7.5\n","Pillow==7.1.2\n","pip-tools==4.5.1\n","plac==1.1.3\n","plotly==4.4.1\n","plotnine==0.6.0\n","pluggy==0.7.1\n","pooch==1.3.0\n","portpicker==1.3.9\n","prefetch-generator==1.0.1\n","preshed==3.0.5\n","prettytable==2.1.0\n","progressbar2==3.38.0\n","prometheus-client==0.10.1\n","promise==2.3\n","prompt-toolkit==1.0.18\n","protobuf==3.12.4\n","psutil==5.4.8\n","psycopg2==2.7.6.1\n","ptyprocess==0.7.0\n","py==1.10.0\n","pyarrow==3.0.0\n","pyasn1==0.4.8\n","pyasn1-modules==0.2.8\n","pycocotools==2.0.2\n","pycparser==2.20\n","pyct==0.4.8\n","pydata-google-auth==1.2.0\n","pydot==1.3.0\n","pydot-ng==2.0.0\n","pydotplus==2.0.2\n","PyDrive==1.3.1\n","pyemd==0.5.1\n","pyerfa==2.0.0\n","pyglet==1.5.0\n","Pygments==2.6.1\n","pygobject==3.26.1\n","pymc3==3.11.2\n","PyMeeus==0.5.11\n","pymongo==3.11.4\n","pymystem3==0.2.0\n","PyOpenGL==3.1.5\n","pyparsing==2.4.7\n","pyrsistent==0.17.3\n","pysndfile==1.3.8\n","PySocks==1.7.1\n","pystan==2.19.1.1\n","pytest==3.6.4\n","python-apt==0.0.0\n","python-chess==0.23.11\n","python-dateutil==2.8.1\n","python-louvain==0.15\n","python-slugify==5.0.2\n","python-utils==2.5.6\n","pytz==2018.9\n","PyVirtualDisplay==2.2\n","pyviz-comms==2.0.1\n","PyWavelets==1.1.1\n","PyYAML==3.13\n","pyzmq==22.0.3\n","qdldl==0.1.5.post0\n","qtconsole==5.1.0\n","QtPy==1.9.0\n","regex==2019.12.20\n","requests==2.23.0\n","requests-oauthlib==1.3.0\n","resampy==0.2.2\n","retrying==1.3.3\n","rpy2==3.4.4\n","rsa==4.7.2\n","scikit-image==0.16.2\n","scikit-learn==0.22.2.post1\n","scipy==1.4.1\n","screen-resolution-extra==0.0.0\n","scs==2.1.3\n","seaborn==0.11.1\n","semver==2.13.0\n","Send2Trash==1.5.0\n","setuptools-git==1.2\n","Shapely==1.7.1\n","simplegeneric==0.8.1\n","six==1.15.0\n","sklearn==0.0\n","sklearn-pandas==1.8.0\n","smart-open==5.0.0\n","snowballstemmer==2.1.0\n","sortedcontainers==2.4.0\n","SoundFile==0.10.3.post1\n","spacy==2.2.4\n","Sphinx==1.8.5\n","sphinxcontrib-serializinghtml==1.1.4\n","sphinxcontrib-websupport==1.2.4\n","SQLAlchemy==1.4.15\n","sqlparse==0.4.1\n","srsly==1.0.5\n","statsmodels==0.10.2\n","sympy==1.7.1\n","tables==3.4.4\n","tabulate==0.8.9\n","tblib==1.7.0\n","tensorboard==2.5.0\n","tensorboard-data-server==0.6.1\n","tensorboard-plugin-wit==1.8.0\n","tensorflow==2.5.0\n","tensorflow-datasets==4.0.1\n","tensorflow-estimator==2.5.0\n","tensorflow-gcs-config==2.5.0\n","tensorflow-hub==0.12.0\n","tensorflow-metadata==1.0.0\n","tensorflow-probability==0.12.1\n","termcolor==1.1.0\n","terminado==0.10.0\n","testpath==0.5.0\n","text-unidecode==1.3\n","textblob==0.15.3\n","Theano-PyMC==1.1.2\n","thinc==7.4.0\n","tifffile==2021.4.8\n","toml==0.10.2\n","toolz==0.11.1\n","torch==1.8.1+cu101\n","torchsummary==1.5.1\n","torchtext==0.9.1\n","torchvision==0.9.1+cu101\n","tornado==5.1.1\n","tqdm==4.41.1\n","traitlets==5.0.5\n","tweepy==3.10.0\n","typeguard==2.7.1\n","typing-extensions==3.7.4.3\n","tzlocal==1.5.1\n","uritemplate==3.0.1\n","urllib3==1.24.3\n","vega-datasets==0.9.0\n","wasabi==0.8.2\n","wcwidth==0.2.5\n","webencodings==0.5.1\n","Werkzeug==1.0.1\n","widgetsnbextension==3.5.1\n","wordcloud==1.5.0\n","wrapt==1.12.1\n","xarray==0.18.2\n","xgboost==0.90\n","xkit==0.0.0\n","xlrd==1.1.0\n","xlwt==1.3.0\n","yellowbrick==0.9.1\n","zict==2.0.0\n","zipp==3.4.1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"NrkVvTrvWZ5H"},"source":["## 什麼是 Lunar Lander？\n","\n","“LunarLander-v2” 這個環境是在模擬登月小艇降落在月球表面時的情形。\n","這個任務的目標是讓登月小艇「安全地」降落在兩個黃色旗幟間的平地上。\n","> Landing pad is always at coordinates (0,0).\n","> Coordinates are the first two numbers in state vector.\n","\n","![](https://gym.openai.com/assets/docs/aeloop-138c89d44114492fd02822303e6b4b07213010bb14ca5856d2d49d6b62d88e53.svg)\n","\n","所謂的「環境」其實同時包括了 agent 和 environment。\n","我們利用 `step()` 這個函式讓 agent 行動，而後函式便會回傳 environment 給予的 observation/state（以下這兩個名詞代表同樣的意思）和 reward。"]},{"cell_type":"markdown","metadata":{"id":"bIbp82sljvAt"},"source":["### Observation / State\n","\n","首先，我們可以看看 environment 回傳給 agent 的 observation 究竟是長什麼樣子的資料："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rsXZra3N9R5T","executionInfo":{"status":"ok","timestamp":1622943855239,"user_tz":-480,"elapsed":19,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"fdabc5f3-10da-47aa-cd99-41e7ee300f21"},"source":["print(env.observation_space)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Box(-inf, inf, (8,), float32)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ezdfoThbAQ49"},"source":["`Box(8,)` 說明我們會拿到 8 維的向量作為 observation，其中包含：垂直及水平座標、速度、角度、加速度等等，這部分我們就不細說。\n","\n","### Action\n","\n","而在 agent 得到 observation 和 reward 以後，能夠採取的動作有："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p1k4dIrBAaKi","executionInfo":{"status":"ok","timestamp":1622943855239,"user_tz":-480,"elapsed":14,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"01c3a40d-b920-4246-c05a-1d0ffcc5719c"},"source":["print(env.action_space)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Discrete(4)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dejXT6PHBrPn"},"source":["`Discrete(4)` 說明 agent 可以採取四種離散的行動：\n","- 0 代表不採取任何行動\n","- 2 代表主引擎向下噴射\n","- 1, 3 則是向左右噴射\n","\n","接下來，我們嘗試讓 agent 與 environment 互動。\n","在進行任何操作前，建議先呼叫 `reset()` 函式讓整個「環境」重置。\n","而這個函式同時會回傳「環境」最初始的狀態。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pi4OmrmZgnWA","executionInfo":{"status":"ok","timestamp":1622943855239,"user_tz":-480,"elapsed":13,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"4b98fcae-773c-4200-f826-7b30eb8c6952"},"source":["initial_state = env.reset()\n","print(initial_state)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["[ 0.00396109  1.4083536   0.40119505 -0.11407257 -0.00458307 -0.09087662\n","  0.          0.        ]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uBx0mEqqgxJ9"},"source":["接著，我們試著從 agent 的四種行動空間中，隨機採取一個行動"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vxkOEXRKgizt","executionInfo":{"status":"ok","timestamp":1622943855241,"user_tz":-480,"elapsed":13,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"65be7637-5a02-42b0-e726-518d0a5cd0b9"},"source":["random_action = env.action_space.sample()\n","print(random_action)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mns-bO01g0-J"},"source":["再利用 `step()` 函式讓 agent 根據我們隨機抽樣出來的 `random_action` 動作。\n","而這個函式會回傳四項資訊：\n","- observation / state\n","- reward\n","- 完成與否\n","- 其餘資訊"]},{"cell_type":"code","metadata":{"id":"E_WViSxGgIk9","executionInfo":{"status":"ok","timestamp":1622943855241,"user_tz":-480,"elapsed":10,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}}},"source":["observation, reward, done, info = env.step(random_action)"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FdieGq7NuBIm"},"source":["第一項資訊 `observation` 即為 agent 採取行動之後，agent 對於環境的 observation 或者說環境的 state 為何。\n","而第三項資訊 `done` 則是 `True` 或 `False` 的布林值，當登月小艇成功著陸或是不幸墜毀時，代表這個回合（episode）也就跟著結束了，此時 `step()` 函式便會回傳 `done = True`，而在那之前，`done` 則保持 `False`。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yK7r126kuCNp","executionInfo":{"status":"ok","timestamp":1622943855242,"user_tz":-480,"elapsed":10,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"a186cddf-1f4e-4733-cbb6-53b239d45590"},"source":["print(done)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["False\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GKdS8vOihxhc"},"source":["### Reward\n","\n","而「環境」給予的 reward 大致是這樣計算：\n","- 小艇墜毀得到 -100 分\n","- 小艇在黃旗幟之間成功著地則得 100~140 分\n","- 噴射主引擎（向下噴火）每次 -0.3 分\n","- 小艇最終完全靜止則再得 100 分\n","- 小艇每隻腳碰觸地面 +10 分\n","\n","> Reward for moving from the top of the screen to landing pad and zero speed is about 100..140 points.\n","> If lander moves away from landing pad it loses reward back.\n","> Episode finishes if the lander crashes or comes to rest, receiving additional -100 or +100 points.\n","> Each leg ground contact is +10.\n","> Firing main engine is -0.3 points each frame.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vxQNs77hi0_7","executionInfo":{"status":"ok","timestamp":1622943855243,"user_tz":-480,"elapsed":9,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"20b13ff3-4ba4-4bc7-f2af-9a6446531adb"},"source":["print(reward) # after doing a random action (0), the immediate reward is stored in this "],"execution_count":15,"outputs":[{"output_type":"stream","text":["-0.8588900517154912\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Mhqp6D-XgHpe"},"source":["### Random Agent\n","\n","最後，在進入實做之前，我們就來看看這樣一個 random agent 能否成功登陸月球："]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":269},"id":"Y3G0bxoccelv","executionInfo":{"status":"ok","timestamp":1622943865990,"user_tz":-480,"elapsed":10755,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"57c0b8c3-7e45-4c3f-cb06-f58d48e713b5"},"source":["\n","env.reset()\n","\n","img = plt.imshow(env.render(mode='rgb_array'))\n","\n","done = False\n","while not done:\n","    action = env.action_space.sample()\n","    observation, reward, done, _ = env.step(action)\n","\n","    img.set_data(env.render(mode='rgb_array'))\n","    display.display(plt.gcf())\n","    display.clear_output(wait=True)"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"F5paWqo7tWL2"},"source":["## Policy Gradient\n","\n","現在來搭建一個簡單的 policy network。\n","我們預設模型的輸入是 8-dim 的 observation，輸出則是離散的四個動作之一："]},{"cell_type":"code","metadata":{"id":"J8tdmeD-tZew","executionInfo":{"status":"ok","timestamp":1622943865991,"user_tz":-480,"elapsed":9,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}}},"source":["class PolicyGradientNetwork(nn.Module):\n","\n","    def __init__(self):\n","        super().__init__()\n","        self.fc1 = nn.Linear(8, 16)\n","        self.fc2 = nn.Linear(16, 16)\n","        self.fc3 = nn.Linear(16, 4)\n","\n","        # self.fc1 = nn.Linear(8, 16)\n","        # self.fc2 = nn.Linear(16, 32)\n","        # self.fc3 = nn.Linear(32, 16)\n","        # self.fc4 = nn.Linear(16, 4)\n","\n","\n","    def forward(self, state):\n","        hid = torch.tanh(self.fc1(state))\n","        hid = torch.tanh(self.fc2(hid))\n","        return F.softmax(self.fc3(hid), dim=-1)\n","\n","    # def forward(self, state):\n","    #     hid = torch.tanh(self.fc1(state))\n","    #     hid = torch.tanh(self.fc2(hid))\n","    #     hid = torch.tanh(self.fc3(hid))\n","    #     return F.softmax(self.fc4(hid), dim=-1)"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ynbqJrhIFTC3"},"source":["再來，搭建一個簡單的 agent，並搭配上方的 policy network 來採取行動。\n","這個 agent 能做到以下幾件事：\n","- `learn()`：從記下來的 log probabilities 及 rewards 來更新 policy network。\n","- `sample()`：從 environment 得到 observation 之後，利用 policy network 得出應該採取的行動。\n","而此函式除了回傳抽樣出來的 action，也會回傳此次抽樣的 log probabilities。"]},{"cell_type":"code","metadata":{"id":"zZo-IxJx286z","executionInfo":{"status":"ok","timestamp":1622943865992,"user_tz":-480,"elapsed":9,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}}},"source":["\n","class PolicyGradientAgent():\n","    \n","    def __init__(self, network):\n","        self.network = network\n","        # self.optimizer = optim.SGD(self.network.parameters(), lr=0.001)\n","        self.optimizer = optim.Adam(self.network.parameters(), lr=0.001)\n","         \n","    def forward(self, state):\n","        return self.network(state)\n","    def learn(self, log_probs, rewards):\n","        loss = (-log_probs * rewards).sum() # You don't need to revise this to pass simple baseline (but you can)\n","\n","        self.optimizer.zero_grad()\n","        loss.backward(retain_graph=True)\n","        self.optimizer.step()\n","        \n","    def sample(self, state):\n","        action_prob = self.network(torch.FloatTensor(state))\n","        action_dist = Categorical(action_prob)\n","        action = action_dist.sample()\n","        log_prob = action_dist.log_prob(action)\n","        return action.item(), log_prob\n","\n","    def save(self, PATH): # You should not revise this\n","        Agent_Dict = {\n","            \"network\" : self.network.state_dict(),\n","            \"optimizer\" : self.optimizer.state_dict()\n","        }\n","        torch.save(Agent_Dict, PATH)\n","\n","    def load(self, PATH): # You should not revise this\n","        checkpoint = torch.load(PATH)\n","        self.network.load_state_dict(checkpoint[\"network\"])\n","        #如果要儲存過程或是中斷訓練後想繼續可以用喔 ^_^\n","        self.optimizer.load_state_dict(checkpoint[\"optimizer\"])\n"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ehPlnTKyRZf9"},"source":["最後，建立一個 network 和 agent，就可以開始進行訓練了。"]},{"cell_type":"code","metadata":{"id":"GfJIvML-RYjL","executionInfo":{"status":"ok","timestamp":1622943865992,"user_tz":-480,"elapsed":9,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}}},"source":["network = PolicyGradientNetwork()\n","agent = PolicyGradientAgent(network)\n","#agent = PolicyGradientAgent()"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ouv23glgf5Qt"},"source":["## 訓練 Agent\n","\n","現在我們開始訓練 agent。\n","透過讓 agent 和 environment 互動，我們記住每一組對應的 log probabilities 及 reward，並在成功登陸或者不幸墜毀後，回放這些「記憶」來訓練 policy network。"]},{"cell_type":"code","metadata":{"id":"vg5rxBBaf38_","colab":{"base_uri":"https://localhost:8080/","height":66,"referenced_widgets":["05b1ee56970c410896877760b52c9214","8a3106d9a60142469f51c882ab6a089e","c1166743355440d2a355132a2fea512c","af1ee460ae414c2c8bc9132437e5c80e","497d775c41744cfaa78f9485ffe563f6","7c1338fd15274941a7d70c44c7c89d5f","ef822bf70c7e4f5992cb7e52985ca584","686c6cc13ece4aa3bd878184661dcb34"]},"executionInfo":{"status":"ok","timestamp":1622960580754,"user_tz":-480,"elapsed":16714770,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"d84eb405-1f18-44e5-ba1b-3e292b2ca6bc"},"source":["\"\"\"\n","# 現在的reward 的implementation 為每個時刻的瞬時reward, 給定action_list : a1, a2, a3 ......  reward :     r1, r2 ,r3 ......\n","# medium：將reward調整成accumulative decaying reward, 給定action_list : a1,a2, a3 ...... \n","# reward :     r1+0.99*r2+0.99^2*r3+......, r2+0.99*r3+0.99^2*r4+...... ,r3+0.99*r4+0.99^2*r5+ ......\n","# boss : implement DQN\n","# q_target = reward + 0.9 * q_next.max(1)[0].unsqueeze(1) # label\n","\"\"\"\n","from itertools import accumulate\n","def weighted(rewards):\n","    discount_rate = 0.99 #your discount rate\n","    # rewards = [0, 0, 10] # want to translate to: [9, 9.5, 10](approximation)\n","    reversed_rewards = rewards[::-1] #list reversal\n","    acc = list(accumulate(reversed_rewards, lambda x,y: x*discount_rate + y))\n","    return acc[::-1] \n","\"\"\"\"\"\"\n","\n","agent.network.train()  # 訓練前，先確保 network 處在 training 模式\n","# agent.load(f'model_{batch}.bin')\n","# EPISODE_PER_BATCH = 5  # 每蒐集 5 個 episodes 更新一次 agent\n","EPISODE_PER_BATCH = 20  # 每蒐集 20 個 episodes 更新一次 agent\n","\n","# NUM_BATCH = 400        # 總共更新 400 次\n","NUM_BATCH = 2000        # 總共更新 2000 次\n","avg_total_rewards, avg_final_rewards = [], []\n","\n","prg_bar = tqdm(range(NUM_BATCH))\n","for batch in prg_bar:\n","    if batch%100==0 and not batch==0:\n","      agent.save(f'model_{batch}.bin')\n","    log_probs, rewards = [], []\n","    total_rewards, final_rewards = [], []\n","\n","    # 蒐集訓練資料\n","    for episode in range(EPISODE_PER_BATCH):\n","        \n","        state = env.reset()\n","        total_reward, total_step = 0, 0\n","        seq_rewards = []\n","        while True:\n","            action, log_prob = agent.sample(state) # at , log(at|st)\n","            next_state, reward, done, _ = env.step(action)\n","\n","            log_probs.append(log_prob) # [log(a1|s1), log(a2|s2), ...., log(at|st)]\n","            seq_rewards.append(reward)\n","            state = next_state\n","            total_reward += reward\n","            total_step += 1\n","            # ! 重要 ！\n","            # 現在的reward 的implementation 為每個時刻的瞬時reward, 給定action_list : a1, a2, a3 ......  reward :     r1, r2 ,r3 ......\n","            # medium：將reward調整成accumulative decaying reward, 給定action_list : a1,a2, a3 ...... \n","            # reward :     r1+0.99*r2+0.99^2*r3+......, r2+0.99*r3+0.99^2*r4+...... ,r3+0.99*r4+0.99^2*r5+ ......\n","            # boss : implement DQN\n","            # rewards.append(reward) #改這裡\n","\n","            if done:\n","                seq_rewards = weighted(seq_rewards)\n","                seq_rewards = np.nan_to_num(seq_rewards).tolist()\n","                rewards.extend(seq_rewards)\n","                final_rewards.append(reward)\n","                total_rewards.append(total_reward)\n","                break\n","\n","\n","    # print(f\"rewards looks like \", np.shape(rewards))  \n","    # print(f\"log_probs looks like \", np.shape(log_probs))     \n","    # 紀錄訓練過程\n","    avg_total_reward = sum(total_rewards) / len(total_rewards)\n","    avg_final_reward = sum(final_rewards) / len(final_rewards)\n","    avg_total_rewards.append(avg_total_reward)\n","    avg_final_rewards.append(avg_final_reward)\n","    prg_bar.set_description(f\"Total: {avg_total_reward: 4.1f}, Final: {avg_final_reward: 4.1f}\")\n","\n","    # 更新網路\n","    # rewards = np.concatenate(rewards, axis=0)\n","    rewards = (rewards - np.mean(rewards)) / (np.std(rewards) + 1e-9)  # 將 reward 正規標準化\n","    agent.learn(torch.stack(log_probs), torch.from_numpy(rewards))\n","    # print(\"logs prob looks like \", torch.stack(log_probs).size())\n","    # print(\"torch.from_numpy(rewards) looks like \", torch.from_numpy(rewards).size())"],"execution_count":20,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"05b1ee56970c410896877760b52c9214","version_minor":0,"version_major":2},"text/plain":["HBox(children=(FloatProgress(value=0.0, max=2000.0), HTML(value='')))"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vNb_tuFYhKVK"},"source":["### 訓練結果\n","\n","訓練過程中，我們持續記下了 `avg_total_reward`，這個數值代表的是：每次更新 policy network 前，我們讓 agent 玩數個回合（episodes），而這些回合的平均 total rewards 為何。\n","理論上，若是 agent 一直在進步，則所得到的 `avg_total_reward` 也會持續上升，直至 250 上下。\n","若將其畫出來則結果如下："]},{"cell_type":"code","metadata":{"id":"wZYOI8H10SHN","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1622960580755,"user_tz":-480,"elapsed":12,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"bd9d4963-4d6c-4a8d-96b1-8c4eb08f8e55"},"source":["end = time.time()\n","plt.plot(avg_total_rewards)\n","plt.title(\"Total Rewards\")\n","plt.show()"],"execution_count":21,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"mV5jj4dThz0Y"},"source":["另外，`avg_final_reward` 代表的是多個回合的平均 final rewards，而 final reward 即是 agent 在單一回合中拿到的最後一個 reward。\n","如果同學們還記得環境給予登月小艇 reward 的方式，便會知道，不論**回合的最後**小艇是不幸墜毀、飛出畫面、或是靜止在地面上，都會受到額外地獎勵或處罰。\n","也因此，final reward 可被用來觀察 agent 的「著地」是否順利等資訊。"]},{"cell_type":"code","metadata":{"id":"txDZ5vlGWz5w","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1622960581367,"user_tz":-480,"elapsed":619,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"53e097c8-8d31-4b48-faf7-932c13b18f60"},"source":["plt.plot(avg_final_rewards)\n","plt.title(\"Final Rewards\")\n","plt.show()\n"],"execution_count":22,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"gyT7tNwkVdS-"},"source":["訓練時間\n"]},{"cell_type":"code","metadata":{"id":"_t-JsKxUViFy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622960581368,"user_tz":-480,"elapsed":10,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"3b4229d8-dc15-4810-c820-a62ae6188074"},"source":["print(f\"total time is {end-start} sec\")"],"execution_count":23,"outputs":[{"output_type":"stream","text":["total time is 16726.134327173233 sec\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"u2HaGRVEYGQS"},"source":["## 測試"]},{"cell_type":"code","metadata":{"id":"5yFuUKKRYH73","colab":{"base_uri":"https://localhost:8080/","height":493},"executionInfo":{"status":"ok","timestamp":1622960582222,"user_tz":-480,"elapsed":860,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"e2ed476e-f745-4b8d-8f20-32f3e676e11e"},"source":["fix(env, seed)\n","agent.network.eval()  # 測試前先將 network 切換為 evaluation 模式\n","NUM_OF_TEST = 5 # Do not revise it !!!!!\n","test_total_reward = []\n","action_list = []\n","for i in range(NUM_OF_TEST):\n","  actions = []\n","  state = env.reset()\n","\n","  img = plt.imshow(env.render(mode='rgb_array'))\n","\n","  total_reward = 0\n","\n","  done = False\n","  while not done:\n","      action, _ = agent.sample(state)\n","      actions.append(action)\n","      state, reward, done, _ = env.step(action)\n","\n","      total_reward += reward\n","\n","      # img.set_data(env.render(mode='rgb_array'))\n","      # display.display(plt.gcf())\n","      # display.clear_output(wait=True)\n","  print(total_reward)\n","  test_total_reward.append(total_reward)\n","\n","  action_list.append(actions) #儲存你測試的結果\n","  print(\"length of actions is \", len(actions))"],"execution_count":24,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/torch/__init__.py:422: UserWarning: torch.set_deterministic is deprecated and will be removed in a future release. Please use torch.use_deterministic_algorithms instead\n","  \"torch.set_deterministic is deprecated and will be removed in a future \"\n"],"name":"stderr"},{"output_type":"stream","text":["272.28243869649896\n","length of actions is  247\n","270.45646341293616\n","length of actions is  195\n","313.10081919059945\n","length of actions is  224\n","292.5353771491858\n","length of actions is  239\n","281.89026721362586\n","length of actions is  208\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Aex7mcKr0J01","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622960582223,"user_tz":-480,"elapsed":18,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"d3c854ac-45be-4d41-9621-6ebad473af12"},"source":["print(f\"Your final reward is : %.2f\"%np.mean(test_total_reward))"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Your final reward is : 286.05\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"leyebGYRpqsF"},"source":["Action list 的長相"]},{"cell_type":"code","metadata":{"id":"hGAH4YWDpp4u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622960582223,"user_tz":-480,"elapsed":14,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"1d4fa357-6708-4803-f30c-827639597721"},"source":["print(\"Action list looks like \", action_list)\n","print(\"Action list's shape looks like \", np.shape(action_list))"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Action list looks like  [[0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 3, 0, 1, 0, 3, 3, 2, 2, 1, 2, 2, 0, 3, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 2, 2, 2, 2, 2, 2, 0, 1, 2, 3, 2, 3, 1, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 2, 1, 2, 2, 2, 2, 2, 0, 1, 3, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 3, 2, 2, 2, 2, 2, 1, 3, 2, 2, 2, 1, 0, 2, 1, 2, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 2, 2, 2, 2, 0, 3, 2, 3, 2, 2, 2, 2, 0, 1, 1, 2, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 3, 3, 2, 2, 1, 3, 1, 0, 2, 2, 2, 2, 0, 2, 2, 3, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 3, 2, 2, 3, 2, 1, 2, 2, 2, 1, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 0, 2, 2, 3, 3, 2, 1, 1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 3, 2, 2, 3, 2, 2, 2, 3, 2, 2, 0, 2, 2, 3, 2, 2, 2, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 2, 3, 2, 1, 2, 2, 3, 0, 2, 2, 3, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 3, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2, 2, 1, 2, 0, 3, 2, 2, 3, 3, 2, 3, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 1, 3, 2, 2, 3, 3, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 0, 2, 3, 2, 3, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 3, 2, 2, 2, 2, 2, 0, 0, 2, 2, 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 1, 2, 1, 1, 0, 2, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 1, 3, 3, 3, 3, 2, 2, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 3, 0, 0, 3, 3, 3, 1, 2, 2, 2, 3, 2, 2, 1, 1, 2, 3, 1, 2, 3, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 0, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 0, 2, 2, 3, 2, 2, 1, 2, 3, 2, 2, 3, 2, 0, 3, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 3, 2, 2, 2, 0, 1, 2, 2, 2, 1, 3, 2, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 0, 2, 1, 2, 1, 2, 2, 2, 3, 2, 2, 2, 2, 1, 2, 0, 1, 3, 2, 2, 3, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]\n","Action list's shape looks like  (5,)\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  return array(a, dtype, copy=False, order=order)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"l7sokqEUtrFY"},"source":["Action 的分布\n"]},{"cell_type":"code","metadata":{"id":"WHdAItjj1nxw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622960582224,"user_tz":-480,"elapsed":12,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"d08ca0f3-dcc7-4f2f-a878-ad8ee94de094"},"source":["distribution = {}\n","for actions in action_list:\n","  for action in actions:\n","    if action not in distribution.keys():\n","      distribution[action] = 1\n","    else:\n","      distribution[action] += 1\n","print(distribution)"],"execution_count":27,"outputs":[{"output_type":"stream","text":["{0: 399, 1: 121, 3: 129, 2: 464}\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ricE0schY75M"},"source":["儲存 Model Testing的結果\n"]},{"cell_type":"code","metadata":{"id":"GZsMkGmIY42b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622960582224,"user_tz":-480,"elapsed":10,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"ef9407b8-527c-4dfc-e5c6-08e9eb7627e0"},"source":["PATH = \"Action_List_test.npy\" # 可以改成你想取的名字或路徑\n","np.save(PATH ,np.array(action_list)) "],"execution_count":28,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"asK7WfbkaLjt"},"source":["### 你要交到JudgeBoi的檔案94這個\n","儲存結果到本地端 (就是你的電腦裡拉 = = )\n"]},{"cell_type":"code","metadata":{"id":"c-CqyhHzaWAL","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1622960582225,"user_tz":-480,"elapsed":8,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"07ac703e-e4f5-44c5-bf6f-4f1c3bf67dc5"},"source":["from google.colab import files\n","files.download(PATH)"],"execution_count":29,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_01874181-db29-40eb-8e5c-f6a51b2d2eb1\", \"Action_List_test.npy\", 2533)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"seT4NUmWmAZ1"},"source":["# Server 測試\n","到時候下面會是我們Server上測試的環境，可以給大家看一下自己的表現如何"]},{"cell_type":"code","metadata":{"id":"U69c-YTxaw6b"},"source":["action_list = np.load(PATH,allow_pickle=True) #到時候你上傳的檔案\n","seed = 543 #到時候測試的seed 請不要更改\n","fix(env, seed)\n","\n","agent.network.eval()  # 測試前先將 network 切換為 evaluation 模式\n","\n","test_total_reward = []\n","for actions in action_list:\n","  state = env.reset()\n","  img = plt.imshow(env.render(mode='rgb_array'))\n","\n","  total_reward = 0\n","\n","  done = False\n","  # while not done:\n","  done_count = 0\n","  for action in actions:\n","      # action, _ = agent1.sample(state)\n","      state, reward, done, _ = env.step(action)\n","      done_count += 1\n","      total_reward += reward\n","      if done:\n","        \n","        break\n","      img.set_data(env.render(mode='rgb_array'))\n","      display.display(plt.gcf())\n","      display.clear_output(wait=True)\n","  print(f\"Your reward is : %.2f\"%total_reward)\n","  test_total_reward.append(total_reward)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TjFBWwQP1hVe"},"source":["# 你的成績"]},{"cell_type":"code","metadata":{"id":"GpJpZz3Wbm0X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622960583275,"user_tz":-480,"elapsed":18,"user":{"displayName":"Huang Vincent","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghpl69ExtckeK66-37ql1MDxCxxGOFRsSBWZDbjBQ=s64","userId":"16668226139279532247"}},"outputId":"25868602-ca3f-4235-eaf6-51c96dcbb451"},"source":["print(f\"Your final reward is : %.2f\"%np.mean(test_total_reward))"],"execution_count":31,"outputs":[{"output_type":"stream","text":["Your final reward is : 286.05\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wUBtYXG2eaqf"},"source":["## 參考資料\n","\n","以下是一些有用的參考資料。\n","建議同學們實做前，可以先參考第一則連結的上課影片。\n","在影片的最後有提到兩個有用的 Tips，這對於本次作業的實做非常有幫助。\n","\n","- [DRL Lecture 1: Policy Gradient (Review)](https://youtu.be/z95ZYgPgXOY)\n","- [ML Lecture 23-3: Reinforcement Learning (including Q-learning) start at 30:00](https://youtu.be/2-JNBzCq77c?t=1800)\n","- [Lecture 7: Policy Gradient, David Silver](http://www0.cs.ucl.ac.uk/staff/d.silver/web/Teaching_files/pg.pdf)\n"]},{"cell_type":"markdown","metadata":{"id":"cGqP2EU1joWM"},"source":[""]}]}